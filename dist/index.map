{"version":3,"sources":["helpers/pmx.js","index.js"],"names":["pm2","require","init","network","ports","notify","m","console","info","emit","action","probe","histogram","update","metric","set","meter","mark","counter","inc","err","warn","OwKoa","OwModule","constructor","app","options","config","port","undefined","bodyParser","helmet","staticFolder","path","join","__dirname","pmxTracking","koa","server","load","Koa","router","KoaRouter","proxy","use","default","name","samples","ctx","next","setPort","ready","logger","get","status","body","$cache","start","Date","now","debug","routes","allowedMethods","listen","uri","process","on","unload","close"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["let pm2 = {};\n\ntry {\n  if (process.env.NODE_ENV === 'production') {\n    pm2 = require('pmx').init({\n      network: true,\n      ports: true,\n    });\n  } else {\n    pm2.notify = (m) => {\n      console.info('pmx notify');\n      console.info(m);\n    };\n    pm2.emit = () => {};\n    pm2.action = () => {};\n    pm2.probe = () => ({\n      histogram: () => ({\n        update() {}\n      }),\n      metric: () => ({\n        set() {}\n      }),\n      meter: () => ({\n        mark() {}\n      }),\n      counter: () => ({\n        inc() {}\n      }),\n    });\n  }\n} catch (err) {\n  console.warn(err);\n}\n\nexport default pm2;\n","import Koa from 'koa';\nimport KoaRouter from 'koa-router';\nimport bodyParser from 'koa-bodyparser';\nimport helmet from 'koa-helmet';\nimport koaStatic from 'koa-static';\nimport mount from 'koa-mount';\nimport path from 'path';\nimport getPort from 'get-port';\n\nimport {\n  OwModule\n} from 'ow-core';\n\nexport default class OwKoa extends OwModule {\n  constructor(app, options = {}) {\n    super(app);\n\n    this.config = {\n      port: undefined,\n      bodyParser: true,\n      helmet: true,\n      staticFolder: path.join(__dirname, '../../static'),\n      pmxTracking: false,\n      ...options,\n    };\n\n    this.koa = undefined;\n    this.server = undefined;\n    this.port = undefined;\n  }\n\n  load = async () => {\n    const {\n      app,\n      config\n    } = this;\n\n    app.koa = new Koa();\n    app.router = new KoaRouter();\n\n    app.koa.proxy = true;\n\n    if (config.helmet && process.env.NODE_ENV !== 'development') {\n      app.koa.use(helmet());\n    }\n\n    if (config.bodyParser) {\n      app.koa.use(bodyParser());\n    }\n\n    if (config.staticFolder) {\n      app.koa.use(mount('/static', koaStatic(config.staticFolder)));\n    }\n\n    if (config.pmxTracking) {\n      const pm2 = require('./helpers/pmx').default; // eslint-disable-line\n      const probe = pm2.probe();\n\n      const meter = probe.meter({\n        name: 'req/sec',\n        samples: 1,\n      });\n\n      app.koa.use((ctx, next) => {\n        meter.mark();\n        return next();\n      });\n    }\n\n    return this;\n  }\n\n  setPort = async () => {\n    const {\n      config\n    } = this;\n\n    this.port = config.port || process.env.PORT || await getPort();\n\n    if (process.env.NODE_ENV === 'test' && process.env.TEST_PORT) {\n      this.port = process.env.TEST_PORT;\n    }\n\n    return this.port;\n  }\n\n  ready = async () => {\n    const {\n      app: {\n        logger,\n        koa,\n        router\n      }\n    } = this;\n\n    router.get('/checkConnection', (ctx) => {\n      ctx.status = 200;\n      ctx.body = 'ok';\n    });\n\n    // attach a new $cache objcet for each request\n    koa.use(async (ctx, next) => {\n      ctx.$cache = {};\n      await next();\n    });\n\n    // attach request time middleware\n    koa.use(async (ctx, next) => {\n      const start = Date.now();\n\n      await next();\n\n      logger.debug(`Time: ${Date.now() - start}ms`);\n    });\n\n    koa.use(router.routes());\n    koa.use(router.allowedMethods());\n\n    const port = await this.setPort();\n\n    this.app.server = await koa.listen(port);\n    this.server = this.app.server;\n\n    this.app.uri = `http://localhost:${port}`;\n\n    logger.info(`Server listening on http://localhost:${port}`);\n\n    process.on('exit', this.unload);\n  }\n\n\n  unload = () => {\n    this.app.logger.info(`Closing server listening on http://localhost:${this.port}`);\n\n    return this.server.close();\n  }\n}\n"]}